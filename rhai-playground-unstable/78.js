(this.webpackJsonp=this.webpackJsonp||[]).push([[78],{54:function(t,n,e){"use strict";e.r(n),n.default='// This script simulates object-oriented programming (OOP) techniques\n// using function pointers (Fn) and object maps.\n\n// Define object\nlet obj1 = #{\n    _data: 42,                      // data field\n    get_data: Fn("getData"),        // property getter\n    action: Fn("action"),           // method\n    update: Fn("update1")           // property setter\n};\n\nfn getData() {\n    this._data\n}\nfn action() {\n    print("Data=" + this._data);\n}\nfn update1(x) {\n    this._data = x;\n    this.action();\n}\n\nif obj1.get_data() > 0 {            // property access\n    obj1.update(123);               // call method\n} else {\n    print("we have a problem here");\n}\n\n// Define another object based on the first object\nlet obj2 = #{\n    _data: 0,                       // data field - new value\n    update: Fn("update2")           // property setter - another function\n};\nobj2.fill_with(obj1);               // add all other fields from obj1\n\nfn update2(x) {\n    this._data = x * 2;\n    this.action();\n}\n\nif obj2.get_data() > 0 {            // property access\n    obj2.update(0);                 // call method\n} else {\n    obj2.update(42);                // call method\n}\n'}}]);