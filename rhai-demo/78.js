(this.webpackJsonp=this.webpackJsonp||[]).push([[78],{52:function(t,n,r){"use strict";r.r(n),n.default='// This script simulates object-oriented programming (OOP) techniques\r\n// using function pointers (Fn) and object maps.\r\n\r\n// Define object\r\nlet obj1 = #{\r\n    _data: 42,                      // data field\r\n    get_data: Fn("getData"),        // property getter\r\n    action: Fn("action"),           // method\r\n    update: Fn("update1")           // property setter\r\n};\r\n\r\nfn getData() {\r\n    this._data\r\n}\r\nfn action() {\r\n    print("Data=" + this._data);\r\n}\r\nfn update1(x) {\r\n    this._data = x;\r\n    this.action();\r\n}\r\n\r\nif obj1.get_data() > 0 {            // property access\r\n    obj1.update(123);               // call method\r\n} else {\r\n    print("we have a problem here");\r\n}\r\n\r\n// Define another object based on the first object\r\nlet obj2 = #{\r\n    _data: 0,                       // data field - new value\r\n    update: Fn("update2")           // property setter - another function\r\n};\r\nobj2.fill_with(obj1);               // add all other fields from obj1\r\n\r\nfn update2(x) {\r\n    this._data = x * 2;\r\n    this.action();\r\n}\r\n\r\nif obj2.get_data() > 0 {            // property access\r\n    obj2.update(0);                 // call method\r\n} else {\r\n    obj2.update(42);                // call method\r\n}\r\n'}}]);